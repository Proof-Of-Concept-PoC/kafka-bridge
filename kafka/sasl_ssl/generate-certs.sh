CLUSTERCA=kafka-cluster
CLUSTER_TRUSTSTORE=$CLUSTERCA".ts"
CAPASS=secret
ROOT_DIR=secrets
mkdir -p $ROOT_DIR

# Generate the 2048 bit private key (*.key) on CA host
openssl genrsa -out $ROOT_DIR/$CLUSTERCA.key 2048

# Generate the signed certificate of above generated *.key and name it as *.pem
openssl req -x509 -new -key $ROOT_DIR/$CLUSTERCA.key -subj "/C=IN/ST=HAR/L=GGN/O=abc/CN=kafka.confluent.io" -days 3650 -out $ROOT_DIR/$CLUSTERCA.pem

# Import the certificate from *.pem into *.ts file. $CLUSTER_TRUSTSTORE variable used.
keytool -noprompt -importcert -alias $CLUSTERCA -file $ROOT_DIR/$CLUSTERCA.pem -keystore $ROOT_DIR/$CLUSTER_TRUSTSTORE -storepass $CAPASS

cp $ROOT_DIR/$CLUSTER_TRUSTSTORE $ROOT_DIR/node.ts

mkdir -p $ROOT_DIR/client
# Generate private key for rust-bridge powered by libkafkard
openssl genrsa -des3 -passout "pass:$CAPASS" -out $ROOT_DIR/client/client.key 1024
openssl req -passin "pass:$CAPASS" -passout "pass:$CAPASS" -key $ROOT_DIR/client/client.key -new -out $ROOT_DIR/client/client.req -subj "/CN=client.confluent.io/OU=TEST/O=CONFLUENT/L=PaloAlto/C=US"
# Generate cert for libkafkard, it doesn't know how to work with java keystore.
openssl x509 -req -CA $ROOT_DIR/$CLUSTERCA.pem -CAkey $ROOT_DIR/$CLUSTERCA.key -in $ROOT_DIR/client/client.req -out $ROOT_DIR/client/client.pem -days 9999 -CAcreateserial -passin "pass:$CAPASS"

for agent in kafka producer; do
    HOSTNAME=$agent.confluent.io
    PASS=secret
    HOSTNAME_S=$(echo $host | awk -F\. '{print $1}')
    CAPASS=secret
    DIR=$ROOT_DIR/$agent
    CADIR=$ROOT_DIR
    if [ ! -e $CADIR/$CLUSTERCA.key ]; then
        echo "Cannot find CA $CADIR/$CLUSTERCA.key"
        exit 1
    fi

    if [ ! -e $CADIR/$CLUSTERCA.pem ]; then
        echo "Cannot find CA $CADIR/$CLUSTERCA.key"
        exit 1
    fi
    mkdir -p $DIR

    # Create Cert and Keystore
    # Below we are creating the node.ks file which is nothing but the rsa private key for a node $HOSTNAME. -dname will provide all required details (i.e it will not ask for entering country name , state name etc). Keystore password is $PASS.
    # After this step we would have node.ks file in $CLUSTER_NAME/$HOSTNAME directories

    keytool -genkeypair -alias $HOSTNAME -keyalg RSA -keysize 2048 -dname "CN=$HOSTNAME,OU=ABC,O=ABC" -keypass $PASS -keystore $DIR/node.ks -storepass $PASS -validity 3650

    # Export Certs
    # We will export the certificate from node.ks file into a new file $HOSTNAME.cert. Will have 2 files at this time. one - node.ks and second - $HOSTNAME.cert

    keytool -keystore $DIR/node.ks -alias $HOSTNAME -certreq -file $DIR/$HOSTNAME.cert -storepass $PASS -keypass $PASS

    # Sign the Certificate
    # NOW WE WILL USE THE CERTIFIED AUTHORITY (CA- generated by CreatCA.sh script earlier) to sign the above exported/created $HOSTNAME.cert file.
    # we will use CA's private key- $CADIR/$CLUSTERCA.key and CA's sign - $CADIR/$CLUSTERCA.pem.
    # This will take input $HOSTNAME.cert and generate output -$DIR/$HOSTNAME.signed
    # So we will have 3 files after below step: - one - node.ks and second - $HOSTNAME.cert and third- $HOSTNAME.signed

    openssl x509 -req -CA $CADIR/$CLUSTERCA.pem -CAkey $CADIR/$CLUSTERCA.key -in $DIR/$HOSTNAME.cert -out $DIR/$HOSTNAME.signed -days 3650 -CAcreateserial

    # Import CA’s *.pem (signatured certificate) into node.ks so that this host can represent this certificate as an identitiy.

    keytool -noprompt -keystore $DIR/node.ks -storepass $PASS -alias $CLUSTERCA -import -file $CADIR/$CLUSTERCA.pem

    # Import node’s personal signed certificate (*.signed got in previous step) so that it can also represent this certificate as an identitiy (if needed).

    keytool -noprompt -keystore $DIR/node.ks -storepass $PASS -alias $HOSTNAME -import -file $DIR/$HOSTNAME.signed -keypass $PASS

    # Copy the Certified Authorities (CA’s ) node.ts into nodes directories (where *.ks is present) so that whenever a coming node show their certificates(node.ks) it can match if that certificate is present in its truststore (node.ts) and authenticate.
    cp $CADIR/node.ts $DIR/

done
